<?php
/**
 * @file
 * Code for the Collabco Groups Feature feature.
 */

include_once 'collabco_groups_feature.features.inc';
include_once 'collabco_groups_feature.inc';

/**
 * Implements hook_menu().
 */
function collabco_groups_feature_menu() {
  $items['node/%/taxonomy/%/add'] = array(
    'page callback' => 'collabco_groups_feature_term_add_page',
    'page arguments' => array(3),
    'access callback' => 'collabco_groups_feature_term_add_access',
    'access arguments' => array(3),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function collabco_groups_feature_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'collabco_groups_feature_set_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Menu callback to set group tab title for nodes.
 *
 * @return string
 */
function collabco_groups_feature_set_view_tab_title($node) {
  if (og_is_group('node',$node->nid)) {
    return t('About');
  }
  return t('View');
}

/**
 * Menu callback to check access permission to term add page.
 *
 * @return bool
 */
function collabco_groups_feature_term_add_access($bundle) {
  if ($vocabulary = taxonomy_vocabulary_machine_name_load($bundle)) {
    $perm_string = "edit terms in " .  $vocabulary->vid;
    return user_access($perm_string);
  }
  else {
    return TRUE;
  }
}
/**
 * Menu callback to provide users with a term add page.
 *
 * @return array
 *   A Drupal build array.
 */
function collabco_groups_feature_term_add_page($bundle) {
  if ($vocabulary = taxonomy_vocabulary_machine_name_load($bundle)) {
    module_load_include('inc', 'taxonomy', 'taxonomy.admin');
    //Build taxonomy form.
    drupal_set_title($title = t('Add ') . $vocabulary->name, $output = CHECK_PLAIN);
    $form_id = 'taxonomy_form_term';
    $edit = array();
    $form = drupal_get_form($form_id, $edit, $vocabulary);
    return drupal_render($form);
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Implements hook_init().
 * 
 * Set og context from url query, if its being used with entity prepopulate.
 */
function collabco_groups_feature_init() { 
  $params = drupal_get_query_parameters();
  if (!empty($params[OG_AUDIENCE_FIELD])) {
    $group = node_load($params[OG_AUDIENCE_FIELD]);
    og_context('node', $group);
  }
  // Add OG Context for all subpaths of nodes that are groups.
  // Some ugly code to get the group id from path and set og_context.
  // @todo find a better way to do this, why is there no nicer drupal function?? 
  // why dosn't OG do this by default?
 
  // Check if the current path starts with /node/*.
  if ((arg(0) === 'node') && is_numeric(arg(1))) {
    // Load the node from the current path.
    if ($group = node_load(arg(1))) {
      // Check if this is a group node.
      if (!empty($group->{OG_GROUP_FIELD}['und'][0]['value'])) {
        if ($group->{OG_GROUP_FIELD}['und'][0]['value'] === '1') {
        // Set the og context to the group node from the path.
          og_context('node', $group);
        }
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function collabco_groups_feature_block_info() {
  $blocks = array(
    'group_toolbar' => array(
      'info' => t('Group Toolbar'),
    ),
    'group_header' => array(
      'info' => t('Group Header'),
    ),
    'user_groups_list' => array(
      'info' => t('User Groups List'),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function collabco_groups_feature_block_view($delta='') {
  switch($delta) {
    case 'group_toolbar' :
      $block = collabco_groups_feature_build_group_toolbar_block();
      return $block;
    case 'group_header' :
      $block = collabco_groups_feature_build_group_header_block();
      return $block;
    case 'user_groups_list' :
      $block = collabco_groups_feature_build_user_groups_list_block();
      return $block;
  }
} 

/**
 * Implements hook_preprocess_page().
 */
function collabco_groups_feature_preprocess_page(&$vars) {
  $vars['show_title'] = TRUE; // so that showtitle is true by default
  //if (isset($vars['node']->{OG_GROUP_FIELD})) {
    //if ($vars['node']->{OG_GROUP_FIELD}['und'][0]['value'] === '1') { 
      //$vars['show_title'] = FALSE;
    //}
  //}
}

/**
 * Implements hook_entity_insert().
 * 
 * Add new subgroup gid to group terms.
 */
function collabco_groups_feature_entity_insert($entity,$type) { 
  switch ($type) {
  case 'node':
    collabco_groups_feature_add_parent_terms_to_group($entity,$type);
    break;
  case 'taxonomy_term':
    collabco_groups_feature_add_child_groups_to_entity($entity,$type);
    break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function collabco_groups_feature_views_pre_view($view, $display_id, $args) {
  // Find all Collabco integrations.
  $integrations = module_invoke_all('collabco_integration');
  foreach ($integrations as $integration) { 
    if (!empty($integration['views'][$view->name][$display_id]['add_content_link'])) {
      $bundles = $integration['entity']['node'];
      $areas = $integration['views'][$view->name][$display_id]['add_content_link']['areas'];
      collabco_groups_feature_views_content_link($view, $display_id, $bundles, $areas);
    }
  }
}

/**
 * Implements hook_collabco_integration().
 */
function collabco_groups_feature_collabco_integration() {
  // Add links to views if a module wants to do that.
  return array(
    'collabco_groups_feature' => array(
      'entity' => array(
        'node'=> array('closed_group', 'group'),
      ),
      'views' => array(
        'subgroups' => array(
          'group_page' => array(
            'subscribe_flag' => array(
              'group_type' => 'node',
            ),
            'add_content_link' => array(
              'areas' => array('header'),
            ),
          ),
        ),
      ),
    ),
  );
}

