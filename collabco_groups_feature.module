<?php
/**
 * @file
 * Code for the Collabco Groups Feature feature.
 */

include_once 'collabco_groups_feature.features.inc';
include_once 'collabco_groups_feature.inc';

/**
 * Implements hook_init().
 * 
 * Set og context from url query, if its being used with entity prepopulate.
 */
function collabco_groups_feature_init() { 
  // Get group id from path query, as used by entityreference_prepopulate.
  $params = drupal_get_query_parameters();
  if (!empty($params[OG_AUDIENCE_FIELD])) {
    $group = node_load($params[OG_AUDIENCE_FIELD]);
    og_context('node', $group);
  }
  // Add OG Context for all subpaths of nodes that are groups.
  // Some ugly code to get the group id from path and set og_context.
  // @todo find a better way to do this, why is there no nicer drupal function?? 
  // Why dosn't OG do this by default?
  // 
  // Also add a context module context to say we are actually on the group page, 
  // not just another node with the group context.
 
  // Check if the current path starts with /node/*.
  if ((arg(0) === 'node') && is_numeric(arg(1))) {
    // Load the node from the current path.
    if ($group = node_load(arg(1))) {
      // Check if this is a group node.
      if (!empty($group->{OG_GROUP_FIELD}['und'][0]['value'])) {
        if ($group->{OG_GROUP_FIELD}['und'][0]['value'] === '1') {
          // Set the og context to the group node from the path.
          og_context('node', $group);
          // Set context module context.
          context_set('context',OG_GROUP_FIELD);
        }
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function collabco_groups_feature_menu_alter(&$items) {
  unset($items['node/%node/view']['title']);
  $items['node/%node/view']['title callback'] = 'collabco_groups_feature_set_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
}

/**
 * Menu callback to set group tab title for group nodes.
 *
 * @return string
 */
function collabco_groups_feature_set_view_tab_title($node) {
  if (og_is_group('node',$node->nid)) {
    return t('About');
  }
  return t('View');
}

/**
 * Implements hook_block_info().
 */
function collabco_groups_feature_block_info() {
  $blocks = array(
    'group_toolbar' => array(
      'info' => t('Group Toolbar'),
    ),
    'user_groups_list' => array(
      'info' => t('User Groups List'),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function collabco_groups_feature_block_view($delta='') {
  switch($delta) {
    case 'group_toolbar' :
      $block = collabco_groups_feature_build_group_toolbar_block();
      return $block;
    case 'user_groups_list' :
      $block = collabco_groups_feature_build_user_groups_list_block();
      return $block;
  }
} 

/**
 * Implements hook_collabco_integration().
 */
function collabco_groups_feature_collabco_integration() {
  // Add links to views if a module wants to do that.
  return array(
    'collabco_groups_feature' => array(
      'entity' => array(
        'node'=> array(
          'private_group' => array(
            'add_content_link' => TRUE,
            'image'=> array(
              'enabled' => TRUE,
            ),
          ),
          'group' => array(
            'add_content_link' => TRUE,
            'image'=> array(
              'enabled' => TRUE,
            ),
          ),
        ),
      ),
      'views' => array(
        'subgroups' => array(
          'group_page' => array(
            'subscribe_flag' => array(
              'group_type' => 'node',
            ),
            'add_content_link' => array(
              'areas' => array('header'),
            ),
          ),
        ),
      ),
    ),
  );
}
